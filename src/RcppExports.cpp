// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <RcppEigen.h>
#include <Rcpp.h>

using namespace Rcpp;

#ifdef RCPP_USE_GLOBAL_ROSTREAM
Rcpp::Rostream<true>&  Rcpp::Rcout = Rcpp::Rcpp_cout_get();
Rcpp::Rostream<false>& Rcpp::Rcerr = Rcpp::Rcpp_cerr_get();
#endif

// logistic_wrapper
Rcpp::List logistic_wrapper(const Eigen::Map<Eigen::VectorXd> Y, const Eigen::Map<Eigen::MatrixXd> X, const Eigen::Map<Eigen::VectorXd> THETA);
RcppExport SEXP _armb_logistic_wrapper(SEXP YSEXP, SEXP XSEXP, SEXP THETASEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Eigen::Map<Eigen::VectorXd> >::type Y(YSEXP);
    Rcpp::traits::input_parameter< const Eigen::Map<Eigen::MatrixXd> >::type X(XSEXP);
    Rcpp::traits::input_parameter< const Eigen::Map<Eigen::VectorXd> >::type THETA(THETASEXP);
    rcpp_result_gen = Rcpp::wrap(logistic_wrapper(Y, X, THETA));
    return rcpp_result_gen;
END_RCPP
}
// armLR2
Rcpp::List armLR2(const Eigen::Map<Eigen::VectorXd> Y, const Eigen::Map<Eigen::MatrixXd> X, const Eigen::Map<Eigen::VectorXd> THETA0, const int MAXT, const int BURN, const int BATCH, const double STEPSIZE0, const double PAR1, const double PAR2, const double PAR3, const int STORE, const int SKIP_PRINT, const int SEED, const bool VERBOSE);
RcppExport SEXP _armb_armLR2(SEXP YSEXP, SEXP XSEXP, SEXP THETA0SEXP, SEXP MAXTSEXP, SEXP BURNSEXP, SEXP BATCHSEXP, SEXP STEPSIZE0SEXP, SEXP PAR1SEXP, SEXP PAR2SEXP, SEXP PAR3SEXP, SEXP STORESEXP, SEXP SKIP_PRINTSEXP, SEXP SEEDSEXP, SEXP VERBOSESEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Eigen::Map<Eigen::VectorXd> >::type Y(YSEXP);
    Rcpp::traits::input_parameter< const Eigen::Map<Eigen::MatrixXd> >::type X(XSEXP);
    Rcpp::traits::input_parameter< const Eigen::Map<Eigen::VectorXd> >::type THETA0(THETA0SEXP);
    Rcpp::traits::input_parameter< const int >::type MAXT(MAXTSEXP);
    Rcpp::traits::input_parameter< const int >::type BURN(BURNSEXP);
    Rcpp::traits::input_parameter< const int >::type BATCH(BATCHSEXP);
    Rcpp::traits::input_parameter< const double >::type STEPSIZE0(STEPSIZE0SEXP);
    Rcpp::traits::input_parameter< const double >::type PAR1(PAR1SEXP);
    Rcpp::traits::input_parameter< const double >::type PAR2(PAR2SEXP);
    Rcpp::traits::input_parameter< const double >::type PAR3(PAR3SEXP);
    Rcpp::traits::input_parameter< const int >::type STORE(STORESEXP);
    Rcpp::traits::input_parameter< const int >::type SKIP_PRINT(SKIP_PRINTSEXP);
    Rcpp::traits::input_parameter< const int >::type SEED(SEEDSEXP);
    Rcpp::traits::input_parameter< const bool >::type VERBOSE(VERBOSESEXP);
    rcpp_result_gen = Rcpp::wrap(armLR2(Y, X, THETA0, MAXT, BURN, BATCH, STEPSIZE0, PAR1, PAR2, PAR3, STORE, SKIP_PRINT, SEED, VERBOSE));
    return rcpp_result_gen;
END_RCPP
}
// tune_armLR
Rcpp::List tune_armLR(const Eigen::Map<Eigen::VectorXd> Y, const Eigen::Map<Eigen::MatrixXd> X, const Eigen::Map<Eigen::VectorXd> THETA0, const int MAXT, const int BURN, const int BATCH, const double STEPSIZE0, const double SCALE, const double MAXA, const double PAR1, const double PAR2, const double PAR3, const bool AUTO_STOP, const int SKIP_PRINT, const int SEED, const bool VERBOSE);
RcppExport SEXP _armb_tune_armLR(SEXP YSEXP, SEXP XSEXP, SEXP THETA0SEXP, SEXP MAXTSEXP, SEXP BURNSEXP, SEXP BATCHSEXP, SEXP STEPSIZE0SEXP, SEXP SCALESEXP, SEXP MAXASEXP, SEXP PAR1SEXP, SEXP PAR2SEXP, SEXP PAR3SEXP, SEXP AUTO_STOPSEXP, SEXP SKIP_PRINTSEXP, SEXP SEEDSEXP, SEXP VERBOSESEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Eigen::Map<Eigen::VectorXd> >::type Y(YSEXP);
    Rcpp::traits::input_parameter< const Eigen::Map<Eigen::MatrixXd> >::type X(XSEXP);
    Rcpp::traits::input_parameter< const Eigen::Map<Eigen::VectorXd> >::type THETA0(THETA0SEXP);
    Rcpp::traits::input_parameter< const int >::type MAXT(MAXTSEXP);
    Rcpp::traits::input_parameter< const int >::type BURN(BURNSEXP);
    Rcpp::traits::input_parameter< const int >::type BATCH(BATCHSEXP);
    Rcpp::traits::input_parameter< const double >::type STEPSIZE0(STEPSIZE0SEXP);
    Rcpp::traits::input_parameter< const double >::type SCALE(SCALESEXP);
    Rcpp::traits::input_parameter< const double >::type MAXA(MAXASEXP);
    Rcpp::traits::input_parameter< const double >::type PAR1(PAR1SEXP);
    Rcpp::traits::input_parameter< const double >::type PAR2(PAR2SEXP);
    Rcpp::traits::input_parameter< const double >::type PAR3(PAR3SEXP);
    Rcpp::traits::input_parameter< const bool >::type AUTO_STOP(AUTO_STOPSEXP);
    Rcpp::traits::input_parameter< const int >::type SKIP_PRINT(SKIP_PRINTSEXP);
    Rcpp::traits::input_parameter< const int >::type SEED(SEEDSEXP);
    Rcpp::traits::input_parameter< const bool >::type VERBOSE(VERBOSESEXP);
    rcpp_result_gen = Rcpp::wrap(tune_armLR(Y, X, THETA0, MAXT, BURN, BATCH, STEPSIZE0, SCALE, MAXA, PAR1, PAR2, PAR3, AUTO_STOP, SKIP_PRINT, SEED, VERBOSE));
    return rcpp_result_gen;
END_RCPP
}
// armbLR
Rcpp::List armbLR(const Eigen::Map<Eigen::VectorXd> Y, const Eigen::Map<Eigen::MatrixXd> X, const Eigen::Map<Eigen::VectorXd> THETA0, const int R, const int MAXT, const int BURN, const int BATCH, const double STEPSIZE0, const double PAR1, const double PAR2, const double PAR3, const int STORE, const int SKIP_PRINT, const int SEED, const bool VERBOSE);
RcppExport SEXP _armb_armbLR(SEXP YSEXP, SEXP XSEXP, SEXP THETA0SEXP, SEXP RSEXP, SEXP MAXTSEXP, SEXP BURNSEXP, SEXP BATCHSEXP, SEXP STEPSIZE0SEXP, SEXP PAR1SEXP, SEXP PAR2SEXP, SEXP PAR3SEXP, SEXP STORESEXP, SEXP SKIP_PRINTSEXP, SEXP SEEDSEXP, SEXP VERBOSESEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Eigen::Map<Eigen::VectorXd> >::type Y(YSEXP);
    Rcpp::traits::input_parameter< const Eigen::Map<Eigen::MatrixXd> >::type X(XSEXP);
    Rcpp::traits::input_parameter< const Eigen::Map<Eigen::VectorXd> >::type THETA0(THETA0SEXP);
    Rcpp::traits::input_parameter< const int >::type R(RSEXP);
    Rcpp::traits::input_parameter< const int >::type MAXT(MAXTSEXP);
    Rcpp::traits::input_parameter< const int >::type BURN(BURNSEXP);
    Rcpp::traits::input_parameter< const int >::type BATCH(BATCHSEXP);
    Rcpp::traits::input_parameter< const double >::type STEPSIZE0(STEPSIZE0SEXP);
    Rcpp::traits::input_parameter< const double >::type PAR1(PAR1SEXP);
    Rcpp::traits::input_parameter< const double >::type PAR2(PAR2SEXP);
    Rcpp::traits::input_parameter< const double >::type PAR3(PAR3SEXP);
    Rcpp::traits::input_parameter< const int >::type STORE(STORESEXP);
    Rcpp::traits::input_parameter< const int >::type SKIP_PRINT(SKIP_PRINTSEXP);
    Rcpp::traits::input_parameter< const int >::type SEED(SEEDSEXP);
    Rcpp::traits::input_parameter< const bool >::type VERBOSE(VERBOSESEXP);
    rcpp_result_gen = Rcpp::wrap(armbLR(Y, X, THETA0, R, MAXT, BURN, BATCH, STEPSIZE0, PAR1, PAR2, PAR3, STORE, SKIP_PRINT, SEED, VERBOSE));
    return rcpp_result_gen;
END_RCPP
}
// shuffleRows
Eigen::MatrixXd shuffleRows(const Eigen::MatrixXd& X, const int SEED);
RcppExport SEXP _armb_shuffleRows(SEXP XSEXP, SEXP SEEDSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Eigen::MatrixXd& >::type X(XSEXP);
    Rcpp::traits::input_parameter< const int >::type SEED(SEEDSEXP);
    rcpp_result_gen = Rcpp::wrap(shuffleRows(X, SEED));
    return rcpp_result_gen;
END_RCPP
}
// shuffleVec
Eigen::VectorXd shuffleVec(const Eigen::VectorXd& X, const int SEED);
RcppExport SEXP _armb_shuffleVec(SEXP XSEXP, SEXP SEEDSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Eigen::VectorXd& >::type X(XSEXP);
    Rcpp::traits::input_parameter< const int >::type SEED(SEEDSEXP);
    rcpp_result_gen = Rcpp::wrap(shuffleVec(X, SEED));
    return rcpp_result_gen;
END_RCPP
}
// resampleN
std::vector<int> resampleN(const int N, const int SEED);
RcppExport SEXP _armb_resampleN(SEXP NSEXP, SEXP SEEDSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const int >::type N(NSEXP);
    Rcpp::traits::input_parameter< const int >::type SEED(SEEDSEXP);
    rcpp_result_gen = Rcpp::wrap(resampleN(N, SEED));
    return rcpp_result_gen;
END_RCPP
}
// sliceVec
Eigen::VectorXd sliceVec(const std::vector<int> SLICE_IDX, const Eigen::VectorXd X);
RcppExport SEXP _armb_sliceVec(SEXP SLICE_IDXSEXP, SEXP XSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const std::vector<int> >::type SLICE_IDX(SLICE_IDXSEXP);
    Rcpp::traits::input_parameter< const Eigen::VectorXd >::type X(XSEXP);
    rcpp_result_gen = Rcpp::wrap(sliceVec(SLICE_IDX, X));
    return rcpp_result_gen;
END_RCPP
}
// sliceMat
Eigen::MatrixXd sliceMat(const std::vector<int> SLICE_IDX, const Eigen::MatrixXd X);
RcppExport SEXP _armb_sliceMat(SEXP SLICE_IDXSEXP, SEXP XSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const std::vector<int> >::type SLICE_IDX(SLICE_IDXSEXP);
    Rcpp::traits::input_parameter< const Eigen::MatrixXd >::type X(XSEXP);
    rcpp_result_gen = Rcpp::wrap(sliceMat(SLICE_IDX, X));
    return rcpp_result_gen;
END_RCPP
}
// subsetIVec
std::vector<int> subsetIVec(const std::vector<int>& X, const int START, const int LEN);
RcppExport SEXP _armb_subsetIVec(SEXP XSEXP, SEXP STARTSEXP, SEXP LENSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const std::vector<int>& >::type X(XSEXP);
    Rcpp::traits::input_parameter< const int >::type START(STARTSEXP);
    Rcpp::traits::input_parameter< const int >::type LEN(LENSEXP);
    rcpp_result_gen = Rcpp::wrap(subsetIVec(X, START, LEN));
    return rcpp_result_gen;
END_RCPP
}
// shuffleIVec
std::vector<int> shuffleIVec(std::vector<int>& X, const int SEED);
RcppExport SEXP _armb_shuffleIVec(SEXP XSEXP, SEXP SEEDSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::vector<int>& >::type X(XSEXP);
    Rcpp::traits::input_parameter< const int >::type SEED(SEEDSEXP);
    rcpp_result_gen = Rcpp::wrap(shuffleIVec(X, SEED));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_armb_logistic_wrapper", (DL_FUNC) &_armb_logistic_wrapper, 3},
    {"_armb_armLR2", (DL_FUNC) &_armb_armLR2, 14},
    {"_armb_tune_armLR", (DL_FUNC) &_armb_tune_armLR, 16},
    {"_armb_armbLR", (DL_FUNC) &_armb_armbLR, 15},
    {"_armb_shuffleRows", (DL_FUNC) &_armb_shuffleRows, 2},
    {"_armb_shuffleVec", (DL_FUNC) &_armb_shuffleVec, 2},
    {"_armb_resampleN", (DL_FUNC) &_armb_resampleN, 2},
    {"_armb_sliceVec", (DL_FUNC) &_armb_sliceVec, 2},
    {"_armb_sliceMat", (DL_FUNC) &_armb_sliceMat, 2},
    {"_armb_subsetIVec", (DL_FUNC) &_armb_subsetIVec, 3},
    {"_armb_shuffleIVec", (DL_FUNC) &_armb_shuffleIVec, 2},
    {NULL, NULL, 0}
};

RcppExport void R_init_armb(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
